"set term=builtin_ansi	" fix broken arrow key navigation in insert mode
set term=xterm-256color
"set ttymouse=xterm	" Let mouse position the cursor (enable character-mode mouse)

set ttyfast

" Toggle normal and edit mode with Shift+Space
" `^ makes Esc do not move the cursor to the left 
nnoremap <S-Space> i
inoremap <S-Space> <Esc>`^
" or with AltGr+i
nnoremap ‚Üí i
inoremap ‚Üí <Esc>`^

" Reload .vimrc
if !exists(":Vimrc")
  command Vimrc source ~/.vimrc
endif

" remove delay after Esc
set timeoutlen=1000 ttimeoutlen=0

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set nobackup		" do not keep a backup file, use versions instead
set ruler		" show the cursor position all the time
set hlsearch		" switch on highlighting the last used search pattern

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

command! -nargs=1 Diffvsplit vert diffsplit <args>

" Change every backslash to a slash
" nnoremap <silent> <Leader>/ :let tmp=@/<Bar>s:\\:/:ge<Bar>let @/=tmp<Bar>noh<CR>
" Change every slash to a backslash
" nnoremap <silent> <Leader><Bslash> :let tmp=@/<Bar>s:/:\\:ge<Bar>let @/=tmp<Bar>noh<CR>

" Toggle search highlighting
" noremap <F4> :set hlsearch! hlsearch?<CR>

" do not move the cursor when highlighing
" nnoremap * *``
nnoremap * :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hlsearch<CR>

" Open each buffer in its own tabpage
":au BufAdd,BufNewFile,BufRead * nested tab sball

" Easier split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

set splitbelow
set splitright

" Easier tab navigation
nnoremap th	:tabprev<CR>	" gT
nnoremap tl	:tabnext<CR>	" gt
nnoremap t0	:tabfirst<CR>
nnoremap t$	:tablast<CR>
nnoremap to	:tabnew<CR>
" Moving tabs to the left/right
nnoremap Th	:-tabmove<CR>
nnoremap Tl	:+tabmove<CR>
nnoremap T0	:0tabmove<CR>
nnoremap T$	:$tabmove<CR>
nnoremap ‚â§	:-tabmove<CR>
nnoremap ‚â•	:+tabmove<CR>
" edit specified file in a new tab:
nnoremap te	:tabedit<Space>
" go to tab page N:
nnoremap tn	:tabn<Space>
" Move the current tab page to after tab page N.
" Use zero to make the current tab page the first one.
" Without N the tab page is made the last one.
nnoremap tm	:tabm<Space>
nnoremap tw	:tabs<CR>
nnoremap t1	:tabn<Space>1<CR>
nnoremap t2	:tabn<Space>2<CR>
nnoremap t3	:tabn<Space>3<CR>
nnoremap t4	:tabn<Space>4<CR>
nnoremap t5	:tabn<Space>5<CR>
nnoremap t6	:tabn<Space>6<CR>
nnoremap t7	:tabn<Space>7<CR>
nnoremap t8	:tabn<Space>8<CR>
nnoremap t9	:tabn<Space>9<CR>

" Switch to last-active tab
if !exists('g:lasttab')
  let g:lasttab = 1
endif
nnoremap t<Tab> :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

nnoremap td	:tabclose<CR>
" Open a new tab page and edit the file name under the cursor.
nnoremap tf	<C-w>gf
" Open a new tab page and edit the file name under the cursor
" and jump to the line number following the file name.
nnoremap tF	<C-w>gF
" switch to the existing tab if the buffer is open, or create a new one if not
set switchbuf+=usetab,newtab


" Jump to the matching object (parenthesis, brackets, etc.) and visually select all the text in between
"noremap % v%

" Delete entire word in insert mode
imap <C-d> <C-[>diwi

" Toggle showing line numbers
nmap <C-N> :set invnumber<CR>

" Show line number
set number

" Keep always 10 lines above and below visible
set scrolloff=10

" Let all vim sessions share the same X selection buffer
set clipboard=unnamedplus

" vim-gitgutter
set updatetime=250

" Show 80th line mark
" set colorcolumn=121
augroup MyColorColumnGroup
	autocmd!
	autocmd BufEnter * set colorcolumn=121
augroup END


" Highlight the line with cursor
set cursorline
hi CursorLine cterm=NONE ctermbg=235
" for colors see http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim

" File explorer
""nnoremap <C-A-e> :Explore<CR>
""nnoremap <C-A-r> :Rexplore<CR>
""nnoremap <C-A-s> :Sexplore<CR>
""nnoremap <C-A-v> :Vexplore<CR>

" undotree
nnoremap <F5> :UndotreeToggle<cr>
if has("persistent_undo")
	set undodir=~/.undodir/
	set undofile
endif

" Insert newline without entering insert mode
nnoremap ƒÖ mzO<Esc>`zdmz
nnoremap ‚Äù mzo<Esc>`zdmz

" Insert a new line character without entering insert mode
" nnoremap <CR> i<CR><Esc>`^

" Find visually selected text
vnoremap <expr> // 'y/\V'.escape(@",'\').'<CR>'

" Select the current/next highlighted text (last/next search match)
nnoremap sh :normal! gn<CR>
" Change the current/next highlighted text (last/next search match)
nnoremap ch :normal! gn<CR>c

" vim-smooth-scroll
nnoremap <silent> <c-u> :call smooth_scroll#up(&scroll, 10, 2)<CR>
nnoremap <silent> <c-d> :call smooth_scroll#down(&scroll, 10, 2)<CR>
nnoremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 10, 4)<CR>
nnoremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 10, 4)<CR>
inoremap <C-e> <C-x><C-e>
inoremap <C-y> <C-x><C-y>

" move lines
" down
nnoremap <A-j> :m .+1<CR>
inoremap <A-j> <ESC>:m .+1<CR>gi
vnoremap <A-j> :m '>+1<CR>gv
"nnoremap …ô :m .+1<CR>
"inoremap …ô <ESC>:m .+1<CR>gi
"vnoremap …ô :m '>+1<CR>gv
set <m-j>=j
nnoremap <m-j> :m .+1<CR>
" up
nnoremap <A-k> :m .-2<CR>
inoremap <A-k> <ESC>:m .-2<CR>gi
vnoremap <A-k> :m '<-2<CR>gv
"nnoremap ‚Ä¶ :m .-2<CR>
"inoremap ‚Ä¶ <ESC>:m .-2<CR>gi
"vnoremap ‚Ä¶ :m '<-2<CR>gv
set <m-k>=k
nnoremap <m-k> :m .-2<CR>

" swap ][ and ]]
nnoremap ][ ]]
nnoremap ]] ][

" The NERD Tree
let g:nerdtree_tabs_open_on_gui_startup = 0
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
nnoremap <F6> :NERDTreeToggle<CR>
noremap <Leader>t :NERDTreeFind<CR>
" nnoremap <F6> :NERDTreeTabsToggle<CR>
" noremap <Leader>t :NERDTreeTabsFind<CR>
let NERDTreeIgnore=['\.swo$', '\.swp$']

" The NERD Commenter
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1

" easytags
" open definition in a new tab
nnoremap <silent> <Leader><C-]> <C-w><C-]><C-w>T

" python-mode
let g:pymode = 1
let g:pymode_motion = 1
" nnoremap <F3> :let g:pymode = 1 - g:pymode<Bar>echo "g:pymode =" g:pymode<CR>
let g:pymode_options_max_line_length = 120

" SimplyLFold
let g:SimplylFold_docstring_preview = 1
nnoremap √¶ za
nnoremap √Ü zA
nnoremap <F8> :set foldmethod=manual foldmethod?<CR>
nnoremap <F9> :set foldmethod=expr foldmethod?<CR>

" tagbar
nnoremap <F7> :TagbarToggle<CR>

" go forward
set <m-l>=l
nnoremap <m-l> <C-i>
" go back
set <m-h>=h
nnoremap <m-h> <C-o>

" cscope
" function! CsNvml()
	" :cd /home/wojtuss/wojtuss/nvml
	" :! cscope -Rb -f /home/wojtuss/wojtuss/cscope.nvml.out
	" :cd -
	" :cs reset
	" :cs add /home/wojtuss/wojtuss/cscope.nvml.out
" endfunction
" command! CsNvml call CsNvml()
" nnoremap <F9> :call CsNvml()<CR>
" find the symbol
nnoremap <silent> gs :cscope find s <cword><CR>
set <m-s>=s
nnoremap <m-s> :cscope find s <cword><CR>
" find the callers of the function
nnoremap <silent> gc :cscope find c <cword><CR>
set <S-m-h>=H
nnoremap <S-m-h> :cscope find c <cword><CR>

" A plugin for using man in vim
" Use Shift+k on a keyword to see its man page
" runtime! ftplugin/man.vim
" set keywordprg=:Man

" For Vim to be your default man pages viewer (+ changes in .bashrc)
let $PAGER=''

" Git: quit from difftool
if &diff
	map Q :cquit<CR>
	map q :qa<CR>
	syntax off
	colorscheme mycolorscheme
else
	colorscheme mycode
endif

" Change cursor shape in different modes
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Cdc = change to directory of the current file
command! Cdc cd %:p:h

" Ctrl+R - insert current directory name
inoremap \pwd <C-R>=getcwd()<CR>

" WatchForChanges to autoread changed files
source ~/.vim/_vimrc_WatchForChanges
let autoreadargs={'autoread':1}
execute WatchForChanges("*",autoreadargs)

" Close file without saving
nnoremap œÄ ZQ
" Close file saving
nnoremap ≈º ZZ

" Vim filename completion
set wildmenu
set wildmode=longest,list
" set wildmode=list:full
set wildignore+=*.a,*.o
set wildignore+=*.swp,*.bak,*.tmp
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=tags,cscope.*
set wildignore+=*.tar.*

" find
" the uppercase variants start the search from the directory of the current
" file for better performance
nnoremap ,f :find *
nnoremap ,F :find <C-R>=expand('%:p:h').'/**/*'<CR>
nnoremap ,s :sfind *
nnoremap ,S :sfind <C-R>=expand('%:p:h').'/**/*'<CR>
nnoremap ,v :vert sfind *
nnoremap ,V :vert sfind <C-R>=expand('%:p:h').'/**/*'<CR>
" let finding files in subdirectiories of the current directory
set path=.,**


" You Complete Me (YCM)
let g:ycm_always_populate_location_list = 1
" Do not show doc in popup automaticaly. Use GetDoc instead.
let g:ycm_auto_hover = ''
" Where 'GoTo*' commands result should be opened
let g:ycm_goto_buffer_command = 'split-or-existing-window'
" let g:ycm_goto_buffer_command = 'split'

nnoremap <leader>rs :YcmRestartServer<CR>
nnoremap <leader>fc :YcmForceCompileAndDiagnostics<CR>
nnoremap <leader>gt :tab YcmCompleter GoTo<CR>
nnoremap <leader>gd :tab YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :tab YcmCompleter GoToDefinition<CR>
nnoremap <leader>gi :tab YcmCompleter GoToInclude<CR>
nnoremap <leader>gr :tab YcmCompleter GoToReferences<CR>
nnoremap <leader>fi :YcmCompleter FixIt<CR>
nnoremap <leader>et :YcmCompleter GetType<CR>
nnoremap <leader>ed :YcmCompleter GetDoc<CR>
nnoremap <leader>rr :YcmCompleter RefactorRename 

" listtoggle
let g:lt_quickfix_list_toggle_map = '<F3>'
let g:lt_location_list_toggle_map = '<F4>'

" close scratch buffer/preview window
nnoremap <F10> :pclose<CR>
inoremap <F10> :pclose<CR>

" Global Gtags
nnoremap <leader>r :GtagsCursor<CR> :copen<CR>
nnoremap <leader>n :cn<CR>
nnoremap <leader>p :cp<CR>
let Gtags_Auto_Update = 1
let Gtags_No_Auto_Jump = 1
let Gtags_Close_When_Single = 1

" EasyMotion
" AltGr+g
map ≈ã <Plug>(easymotion-prefix)
map ≈õ <Plug>(easymotion-s)
let g:EasyMotion_smartcase = 1

" minimal gdb
nnoremap <leader>bs :MinGDBToggleBP<CR>
nnoremap <leader>bl :MinGDBListAll<CR>
nnoremap <leader>bD :MinGDBDeleteAll<CR>
nnoremap <leader>br :MinGDBRefreshFile<CR>

" vim-codefmt
augroup autoformat_settings
autocmd FileType bzl AutoFormatBuffer buildifier
autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
autocmd FileType dart AutoFormatBuffer dartfmt
autocmd FileType go AutoFormatBuffer gofmt
autocmd FileType gn AutoFormatBuffer gn
autocmd FileType html,css,json AutoFormatBuffer js-beautify
autocmd FileType java AutoFormatBuffer google-java-format
" autocmd FileType python AutoFormatBuffer yapf
autocmd FileType python AutoFormatBuffer black
" Alternative: autocmd FileType python AutoFormatBuffer autopep8
augroup END
nnoremap <leader>fo :FormatCode<CR>
nnoremap <leader>fl :FormatLines<CR>
vnoremap <leader>fl :FormatLines<CR>

"vim-signature
" nmap m<S-Tab> ['
" nmap m<Tab> ]'
" nnoremap '. ]'
" nnoremap `, [`
" nnoremap `. ]`
" let g:SignatureMap = {'GotoNextLineByPos' : "<leader>mn", 'GotoPrevLineByPos' : "<leader>mp"}

" vim-submode
call submode#enter_with('change_tab', 'n', '', 'th', ':tabprev<CR>')
call submode#enter_with('change_tab', 'n', '', 'tl', ':tabnext<CR>')
call submode#map('change_tab', 'n', '', 'h', ':tabprev<CR>')
call submode#map('change_tab', 'n', '', 'l', ':tabnext<CR>')
call submode#enter_with('move_tab', 'n', '', 'Th', ':-tabmove<CR>')
call submode#enter_with('move_tab', 'n', '', 'Tl', ':+tabmove<CR>')
call submode#map('move_tab', 'n', '', 'h', ':-tabmove<CR>')
call submode#map('move_tab', 'n', '', 'l', ':+tabmove<CR>')
silent! call submode#enter_with('resize_split', 'n', '', '<C-w>h', '<C-w><')
silent! call submode#enter_with('resize_split', 'n', '', '<C-w>l', '<C-w>>')
silent! call submode#enter_with('resize_split', 'n', '', '<C-w>k', '<C-w>+')
silent! call submode#enter_with('resize_split', 'n', '', '<C-w>j', '<C-w>-')
call submode#map('resize_split', 'n', '', 'h', '<C-w><')
call submode#map('resize_split', 'n', '', 'l', '<C-w>>')
call submode#map('resize_split', 'n', '', 'k', '<C-w>+')
call submode#map('resize_split', 'n', '', 'j', '<C-w>-')
" call submode#enter_with('go_to_mark', 'n', '', '`.', ']`')
" call submode#enter_with('go_to_mark', 'n', '', '`,', '[`')
" call submode#enter_with('go_to_mark_line', 'n', '', 'm<S-Tab>', 'm<S-Tab>')
" call submode#enter_with('go_to_mark_line', 'n', '', 'm<Tab>', 'm<Tab>')
" call submode#map('go_to_mark', 'n', '', '.', ']`')
" call submode#map('go_to_mark', 'n', '', ',', '[`')
" call submode#map('go_to_mark_line', 'n', '', '<S-Tab>', 'm<S-Tab>')
" call submode#map('go_to_mark_line', 'n', '', '<Tab>', 'm<Tab>')
let g:submode_keep_leaving_key = 1
let g:submode_timeoutlen = 250
